--
-- FSL Example
--
hm  = ${model['magn_height']}*1e3

hm = 5    -- height of magnets [mm]
hrs = (da2 - dy2)/2 -hm   -- height of rotor yoke [mm]

Br=m.remanenc
urm=m.relperm

P=m.num_poles
Pm=m.npols_gen

r=da2/2

x = {}
y = {} 

-- Coordinates

x[1],y[1] = pd2c(r,0)
x[2],y[2] = pd2c(r,360/P)
x[3],y[3] = pd2c(r-hm,0)
x[4],y[4] = pd2c(r-hm,360/P)
x[5],y[5] = pd2c(r-hm-hrs,0)
x[6],y[6] = pd2c(r-hm-hrs,360/P)

-- Nodechains

nc_circle(x[1],y[1],x[2],y[2],360/P/agndst+1)
nc_circle(x[3],y[3],x[4],y[4],0)
nc_circle(x[5],y[5],x[6],y[6],0)

nc_line(x[5],y[5],x[3],y[3],0)
nc_line_cont(x[1],y[1],0)
nc_line(x[6],y[6],x[4],y[4],0)
nc_line_cont(x[2],y[2],0)

-- Meshing

create_mesh_se(r-hm/2,1.0)
create_mesh_se(r-hm-hrs/2,1.0)

-- Subregions

 x0, y0 = pd2c(r-hm-hrs/2,180/P)
 def_new_subreg(x0, y0, "RotorYoke",11)

-- Copy region

rotate_copy_nodechains(x[5],y[5],x[1],y[1],x[2],y[2],x[6],y[6],Pm-1)

-- Material

--  PM yoke

 if mcvkey_yoke ~= 'dummy' then
   def_mat_fm_nlin(x0, y0, blue, mcvkey_yoke, 100)
 else
    urr=1000.0
    def_mat_fm(x0,y0,urr,100)
 end  

-- Permanent magnets
for i=0, Pm-1 do
  x,y = pd2c(da2/2-hm/2,360/P*i+180/P)
  if ( i % 2 == 0 ) then
    def_mat_pm(x,y,green,Br,urm,180,m.radial,100)
  else
    def_mat_pm(x,y,red,Br,urm,0,m.radial,100)
  end
end
