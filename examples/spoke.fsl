
-- Model parameters

ds = ${model['shaft_diam']}*1e3
hm = ${model['magn_height']}*1e3
bm = ${model['magn_width']}*1e3
ws = ${model['slot_width']}*1e3

-- calculate slot height and pole pitch
hs = (da2-dy2)/2 - bm   
taup = math.pi/m.num_poles

x = {}
y = {} 

-- characteristic points of model

ar = math.sqrt(dy2^2+hm^2)/2
x[1] = ar*math.cos(taup - math.atan2(hm/2, dy2/2))
y[1] = 0
x[2],y[2] = pr2c(dy2/2+bm, 0)
x[3],y[3] = pr2c(da2/2, 0)
x[4],y[4] = pr2c(da2/2, taup - math.atan2(ws/2,(da2/2)))
x[5],y[5] = pr2c(da2/2-hs, taup - math.atan2(ws/2,(da2/2 - hs)))
x[6],y[6] = pr2c(da2/2-hs, taup - math.atan2(hm/2, da2/2-hs))
x[7],y[7] = pr2c(ar, taup - math.atan2(hm/2, dy2/2))
x[8],y[8] = pr2c(dy2/2, taup)
x[9],y[9] = pr2c(da2/2 - hs, taup)
x[10],y[10] = pr2c(da2/2, taup)

ndt(agndst)
nc_circle(x[3], y[3], x[4], y[4], 0)
nc_circle(x[4], y[4], x[10], y[10], 0)
ndt(1.7*agndst)
nc_circle(x[2], y[2], x[6], y[6], 0)
nc_line(x[2], y[2], x[3], y[3], 0)
nc_line(x[4], y[4], x[5], y[5], 0)

nc_line(x[5], y[5], x[9], y[9], 0)
nc_line(x[5], y[5], x[6], y[6], 0)
nc_line(x[9], y[9], x[10], y[10], 0)

x0, y0 = pr2c((da2+dy2+2*bm)/4, taup - math.atan2(ws/2,(da2/2))/2)
create_mesh_se(x0, y0)

x0, y0 = (da2+dy2+2*bm)/4, 0.1
create_mesh_se(x0, y0)
def_new_subreg(x0, y0, "RotorYoke", 11)

ndt(4*agndst)
nc_line(x[1], y[1], x[2], y[2], 0)
nc_line(x[6], y[6], x[7], y[7], 0)
nc_line(x[7], y[7], x[8], y[8], 0)
nc_line(x[7], y[7], x[1], y[1], 0)
nc_line(x[8], y[8], x[9], y[9], 0)

x0, y0 = dy2/2+bm/4, 0.1
create_mesh_se(x0, y0)
add_to_subreg(x0, y0, "RotorYoke")

x0, y0 = pr2c((dy2+bm)/2, taup - math.atan2(hm/4, (dy2+bm)/2))
create_mesh_se(x0, y0)

ndt(6*agndst)
nc_line(ds/2, 0, x[1], y[1], 0)
x0, y0 = pr2c(ds/2, taup)
nc_line(x[8], y[8], x0, y0, 0)
nc_circle(ds/2,0, x0, y0, 0)

x1, y1 = pr2c( (ds+dy2)/4, taup/2)
create_mesh_se(x1, y1)
def_new_subreg(x1, y1, "Shaft", lightgrey)

mirror_nodechains(x[10], y[10], x0, y0)

x[11], y[11] = pr2c(da2/2, 2*taup)
x[12], y[12] = pr2c(ds/2, 2*taup)

rotate_copy_nodechains(ds/2, 0, x[3], y[3],
                       x[11], y[11], x[12], y[12], m.npols_gen-1)

-- -----------------------------
-- ---- Material Properties ----
-- -----------------------------

-- --  PM yoke
 urr=1000
 x0, y0 = (da2+dy2)/4, 0.1
 if mcvkey_yoke ~= 'dummy' then
   def_mat_fm_nlin(x0, y0, blue, mcvkey_yoke, 100)
 else
    def_mat_fm(x0,y0,1000.0,100)
 end  

-- -- Permanent magnets
 for i=0, m.npols_gen-1 do
   x0,y0 = pr2c((da2+dy2)/4, (2*i+1)*taup - math.atan2(hm/4,(da2+dy2)/4))
   x1,y1 = pr2c((da2+dy2)/4, (2*i+1)*taup + math.atan2(hm/4,(da2+dy2)/4))
   phi = (2*i+1)*taup*180/math.pi
   if ( i % 2 == 0 ) then
     def_mat_pm(x0, y0,red,m.remanenc, m.relperm, phi+90, m.parallel,100)
     def_mat_pm(x1, y1,red,m.remanenc, m.relperm, phi+90, m.parallel,100)
   else
     def_mat_pm(x0, y0, green, m.remanenc, m.relperm, phi-90, m.parallel,100)
     def_mat_pm(x1, y1, green, m.remanenc, m.relperm, phi-90, m.parallel,100)
   end
 end
